apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  labels:
    app: user-service

spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-service
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: user-service
        tier: service
    spec:
      containers:
        - name: user-service
          # has to match the call to docker build -t in deploy_cluster.sh
          image: user_service:latest
          # We are using local images
          imagePullPolicy: Never
          ports:
          - containerPort: 8080
          env:
          - name: PORT
            value: "8080"
          volumeMounts:
            - mountPath: /root/.config/tbr
              name: secrets
      volumes:
        - name: secrets
          persistentVolumeClaim:
            claimName: secrets-pv-claim

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: statistics-service
  labels:
    app: statistics-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: statistics-service
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: statistics-service
        tier: service
    spec:
      containers:
        - name: statistics-service
          # has to match the call to docker build -t in deploy_cluster.sh
          image: statistics_service:latest
          # We are using local images
          imagePullPolicy: Never
          ports:
          - containerPort: 8080
          env:
          - name: PORT
            value: "8080"
          volumeMounts:
            - mountPath: /root/.config/tbr
              name: secrets
      volumes:
        - name: secrets
          persistentVolumeClaim:
            claimName: secrets-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: game-service
  labels:
    app: game-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: game-service
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: game-service
        tier: service
    spec:
      containers:
        - name: game-service
          # has to match the call to docker build -t in deploy_cluster.sh
          image: game_service:latest
          # We are using local images
          imagePullPolicy: Never
          ports:
          - containerPort: 8080
          env:
          - name: PORT
            value: "8080"
          volumeMounts:
            - mountPath: /root/.config/tbr
              name: secrets
      volumes:
        - name: secrets
          persistentVolumeClaim:
            claimName: secrets-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: matchmaking-service
  labels:
    app: matchmaking-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: matchmaking-service
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: matchmaking-service
        tier: service
    spec:
      containers:
        - name: matchmaking-service
          # has to match the call to docker build -t in deploy_cluster.sh
          image: matchmaking_service:latest
          # We are using local images
          imagePullPolicy: Never
          ports:
          - containerPort: 8080
          env:
          - name: PORT
            value: "8080"
          volumeMounts:
            - mountPath: /root/.config/tbr
              name: secrets
      volumes:
        - name: secrets
          persistentVolumeClaim:
            claimName: secrets-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
  labels:
    app: gateway

spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: gateway
        tier: service
    spec:
      containers:
        - name: gateway
          # has to match the call to docker build -t in deploy_cluster.sh
          image: gateway:latest
          # We are using local images
          imagePullPolicy: Never
          ports:
          - containerPort: 8080
          env:
          - name: PORT
            value: "8080"
          volumeMounts:
            - mountPath: /root/.config/tbr
              name: secrets
      volumes:
        - name: secrets
          persistentVolumeClaim:
            claimName: secrets-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  labels:
    app: user-service
    tier: service
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 8080
    - name: grpc
      protocol: TCP
      port: 8081
  selector:
    app: user-service
---
apiVersion: v1
kind: Service
metadata:
  name: matchmaking-service
  labels:
    app: matchmaking-service
    tier: service
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 8080
    - name: grpc
      protocol: TCP
      port: 8081
  selector:
    app: matchmaking-service
---
apiVersion: v1
kind: Service
metadata:
  name: statistics-service
  labels:
    app: statistics-service
    tier: service
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 8080
    - name: grpc
      protocol: TCP
      port: 8081
  selector:
    app: statistics-service
---
apiVersion: v1
kind: Service
metadata:
  name: game-service
  labels:
    app: game-service
    tier: service
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 8080
    - name: grpc
      protocol: TCP
      port: 8081
  selector:
    app: game-service
---
apiVersion: v1
kind: Service
metadata:
  name: gateway
  labels:
    app: gateway
    tier: service
spec:
  type: NodePort
  ports:
    - port: 8080
  selector:
    app: gateway
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-pv-volume
  labels:
    type: local
    app: db
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/db-data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-pv-claim
  labels:
    app: db
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: secrets-pv-volume
  labels:
    type: local
    app: secrets
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/secrets-data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: secrets-pv-claim
  labels:
    app: secrets
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-config
  labels:
    app: db
data:
  POSTGRES_DB: postgresdb
  POSTGRES_USER: admin
  POSTGRES_PASSWORD: test123
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
        - name: db
          image: postgres:10.4
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: db-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgresdb
      volumes:
        - name: postgresdb
          persistentVolumeClaim:
            claimName: db-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    app: db
spec:
  type: NodePort
  ports:
   - port: 5432
  selector:
   app: db
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app: redis
spec:
  type: NodePort
  ports:
   - port: 6379
  selector:
   app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:6.2
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 6379
